#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build_5.15_OpenWrt

on:
  #release:
  #  types: published
  push:
    branches:
     - master
  #schedule:
  #  - cron: 0 16 * * 6
  watch:
    types: started

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  SOFT_SH: soft.sh
  DIY_SH: diy_5.15.sh
  OTHER_SH: other.sh
  CONFIG_SH: config-x86.sh
  SSH_ACTIONS: true
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  UPLOAD_FIRMWARE_FOR_RELEASE: false
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  PPPOE_USERNAME: ${{ secrets.PPPOE_USERNAME }}
  PPPOE_PASSWD: ${{ secrets.PPPOE_PASSWD }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-get update
        sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* moby* snap*
        sudo -E apt -y full-upgrade
        sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E systemctl daemon-reload
        sudo -E apt -y autoremove --purge
        sudo -E apt clean
        sudo -E timedatectl set-timezone "Asia/Shanghai"

        df -h

    - name: 设置环境变量
      id: date
      run: |
        echo "::set-env name=date::$(date +'%m/%d_%Y_%H/%M')"
        echo "::set-env name=date2::$(date +'%m/%d %Y')"
        echo "::set-env name=date3::$(date +'%m.%d')"
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🛸" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        RANDOM=$$$(date +%s)
        rand=$[$RANDOM % ${#Emoji[@]}]
        echo "::set-env name=EMOJI::${Emoji[$rand]}"

    - name: 克隆代码
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    # 界面化配置,等待SSH连接 
    # - name: 等待SSH连接
    #   uses: P3TERX/debugger-action@main
    #   if: env.SSH_ACTIONS == 'true'

    - name: 执行 soft.sh
      run: |
        pwd
        chmod +x $SOFT_SH
        cd openwrt
        ../$SOFT_SH

    - name: 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 执行 diy.sh
      run: |
        pwd
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        pwd
        chmod +x $DIY_SH
        cd openwrt
        sed -i 's/^[ \t]*//g' ./.config
        make defconfig
        ../$DIY_SH

    - name: 执行 config.sh
      run: |
        pwd
        chmod +x $CONFIG_SH
        ./$CONFIG_SH
    
    - name: 执行 other.sh
      run: |
        pwd
        chmod +x $OTHER_SH
        ./$OTHER_SH

    # 界面化配置,等待SSH连接 
    # - name: SSH connection to Actions
    #   uses: P3TERX/debugger-action@main
    #   if: env.SSH_ACTIONS == 'true'
    #  make -j$(nproc) V=s

    - name: 下载 package
      id: package
      run: |
        pwd
        cd openwrt
        make download -j16
        find ./dl/ -size -1024c -exec rm -f {} \;

    - name: 编译po2lmo
      run: |
        pwd
        cd openwrt
        ls -l 
        pwd
        pushd package/po2lmo
        make && sudo make install
        popd
        cd package
        ls -l

    - name: 编译固件
      id: compile
      run: |
        pwd
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j1 V=s
        echo "::set-output name=status::success"

    - name: 上传 bin 目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_directory
        path: openwrt/bin

    - name: 打包 files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        pwd
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$PWD"
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    - name: 上传到奶牛快传
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        pwd
        curl -fsSL git.io/file-transfer | sh
        cowurl=$(./transfer cow --block 2621440 -s --no-progress ${FIRMWARE})
        cowurl=$(echo $cowurl | grep -o -E "https[^ ]*")
        echo "::set-env name=COWURL::$cowurl"
        echo "::warning file=cowtransfer.com::$cowurl"

    - name: 上传到WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        pwd
        curl -fsSL git.io/file-transfer | sh
        wetrans=$(./transfer wet -s -p 16 --no-progress ${FIRMWARE})
        wetrans=$(echo $wetrans | grep -o -E "https[^ ]*")
        echo "::set-env name=WETRANS::$wetrans"
        echo "::warning file=wetransfer.com::$wetrans"

    - name: 创建 release
      id: create_release
      uses: actions/create-release@main
      continue-on-error: true
      if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        tag_name: ${{ env.date }}
        release_name: 5.15_${{ env.date2 }} ${{ env.EMOJI }}
        body: |
            墙内加速下载🔥:
            
            ${{ env.COWURL }} 🚀
            
            ${{ env.WETRANS }} 🗽

        draft: false
        prerelease: false     

    - name: 上传到 release
      uses: csexton/release-asset-action@master
      continue-on-error: true
      if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
      with:
        pattern: "${{ env.FIRMWARE }}/*"
        github-token: ${{ secrets.REPO_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}

    - name: 清理旧的workflow
      uses: ActionsRML/delete-workflow-runs@main
      with:
        token: ${{ secrets.REPO_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 30

    - name: 删除旧的Releases
      uses: dev-drprasad/delete-older-releases@v0.2.0
      with:
        keep_latest: 9
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
